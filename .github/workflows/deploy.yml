name: Deploy Infra - Terraform

on:
  push:
    branches:
      - "main"

jobs:
  deploy:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest

    env:
      TF_VERSION: 1.0.0
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
      KUBERNETES_CLUSTER_NAME: ${{ vars.KUBERNETES_CLUSTER_NAME }}

    steps:
      # 1. Checkout do código-fonte
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      # 3. Configurar as credenciais da AWS usando os secrets do GitHub
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # 4. Verificar formatação do Terraform
      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      # 5. Inicializar o Terraform
      - name: Terraform Init
        run: cd terraform && terraform init

      # 6. Validar a configuração do Terraform
      - name: Terraform Validate
        run: cd terraform && terraform validate

      # 7. Planejar as mudanças de infraestrutura e salvar o plano
      - name: Terraform Plan
        run: cd terraform && terraform plan -out=tfplan

      # 8. Aplicar o plano (somente na branch principal)
      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve tfplan

      # 9. Verificar o estado do Terraform para outputs e debug
      - name: Show Terraform State
        run: cd terraform && terraform show

      # 10. Adicione uma etapa para verificar o status do cluster
      - name: Wait for EKS cluster to be ready
        run: |
          until aws eks describe-cluster --name $KUBERNETES_CLUSTER_NAME --region ${{ env.AWS_REGION }} --query "cluster.status" --output text | grep -q "ACTIVE"; do
            echo "Waiting for EKS cluster to be ACTIVE..."
            sleep 30
          done

      # 11. Configurar kubectl para interagir com o cluster Kubernetes
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name $KUBERNETES_CLUSTER_NAME --region ${{ vars.AWS_REGION }}

      - name: Check if Application Exists
        run: |
          if ! kubectl get deployment -n tofood my-app; then
            echo "Application not found. Creating application."
            kubectl apply -f kubernetes/namespaces.yaml
            kubectl apply -f kubernetes/rbac.yaml
          else
            echo "Application already exists. Skipping creation."
          fi

      - name: Get Kubernetes Cluster Nodes
        run: kubectl get nodes

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f kubernetes/namespaces.yaml
          kubectl apply -f kubernetes/rbac.yaml
