name: ðŸ’£ Destroy Infra

on:
  workflow_dispatch: # Executado manualmente

jobs:
  destroy-infra:
    name: ðŸ’£ Destruindo Infra AWS
    runs-on: ubuntu-latest

    env:
      TF_VERSION: 1.0.0
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # Step to terminate EC2 instances
      - name: Terminate EC2 Instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances --query "Reservations[*].Instances[?State.Name=='running'].InstanceId" --output text)
          if [ -z "$INSTANCE_IDS" ]; then
            echo "Nenhuma instÃ¢ncia EC2 em execuÃ§Ã£o encontrada."
          else
            echo "Encerrando instÃ¢ncias EC2: $INSTANCE_IDS"
            aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
            echo "InstÃ¢ncias EC2 encerradas com sucesso."
          fi

      # Step to delete NAT Gateways
      - name: Delete NAT Gateways
        run: |
          NAT_GATEWAY_IDS=$(aws ec2 describe-nat-gateways --query "NatGateways[*].NatGatewayId" --output text)
          if [ -z "$NAT_GATEWAY_IDS" ]; then
            echo "Nenhum NAT Gateway encontrado."
          else
            for NAT_GATEWAY_ID in $NAT_GATEWAY_IDS; do
              echo "Excluindo NAT Gateway: $NAT_GATEWAY_ID"
              aws ec2 delete-nat-gateway --nat-gateway-id $NAT_GATEWAY_ID
              aws ec2 wait nat-gateway-deleted --nat-gateway-id $NAT_GATEWAY_ID
            done
          fi

      # Step to release Elastic IPs
      - name: Release Elastic IPs
        run: |
          ALLOCATION_IDS=$(aws ec2 describe-addresses --query "Addresses[*].AllocationId" --output text)
          if [ -z "$ALLOCATION_IDS" ]; then
            echo "Nenhum Elastic IP encontrado."
          else
            for ALLOCATION_ID in $ALLOCATION_IDS; do
              echo "Liberando Elastic IP: $ALLOCATION_ID"
              aws ec2 release-address --allocation-id $ALLOCATION_ID || echo "Erro ao liberar Elastic IP: $ALLOCATION_ID"
            done
          fi

      # Step to delete Load Balancers
      - name: Delete Load Balancers
        run: |
          LB_ARN_LIST=$(aws elbv2 describe-load-balancers --query "LoadBalancers[*].LoadBalancerArn" --output text)
          if [ -z "$LB_ARN_LIST" ]; then
            echo "Nenhum Load Balancer encontrado."
          else
            for LB_ARN in $LB_ARN_LIST; do
              echo "Excluindo Load Balancer: $LB_ARN"
              aws elbv2 delete-load-balancer --load-balancer-arn $LB_ARN
              aws elbv2 wait load-balancer-deleted --load-balancer-arn $LB_ARN
            done
          fi

      # Step to delete EKS clusters
      - name: Delete EKS Clusters
        run: |
          CLUSTERS=$(aws eks list-clusters --query "clusters" --output text)
          if [ -z "$CLUSTERS" ]; then
            echo "Nenhum cluster EKS encontrado."
          else
            for CLUSTER in $CLUSTERS; do
              echo "Excluindo Cluster EKS: $CLUSTER"
              
              # Delete Node Groups
              NODEGROUPS=$(aws eks list-nodegroups --cluster-name $CLUSTER --query "nodegroups" --output text)
              for NODEGROUP in $NODEGROUPS; do
                echo "Excluindo Node Group: $NODEGROUP do Cluster: $CLUSTER"
                aws eks delete-nodegroup --cluster-name $CLUSTER --nodegroup-name $NODEGROUP
                aws eks wait nodegroup-deleted --cluster-name $CLUSTER --nodegroup-name $NODEGROUP
              done

              # Delete the Cluster
              aws eks delete-cluster --name $CLUSTER
              aws eks wait cluster-deleted --name $CLUSTER
              echo "Cluster EKS $CLUSTER excluÃ­do com sucesso."
            done
          fi

      - name: Delete Network Interfaces
        run: |
          NETWORK_INTERFACE_IDS=$(aws ec2 describe-network-interfaces --query "NetworkInterfaces[*].NetworkInterfaceId" --output text)
          if [ -z "$NETWORK_INTERFACE_IDS" ]; then
            echo "Nenhuma interface de rede encontrada."
          else
            for NETWORK_INTERFACE_ID in $NETWORK_INTERFACE_IDS; do
              echo "Verificando dependÃªncias para a interface: $NETWORK_INTERFACE_ID"

              # Desvincular Elastic IP associado
              ALLOCATION_ID=$(aws ec2 describe-addresses --query "Addresses[?NetworkInterfaceId=='$NETWORK_INTERFACE_ID'].AllocationId" --output text)
              if [ "$ALLOCATION_ID" != "None" ]; then
                echo "Liberando Elastic IP $ALLOCATION_ID associado Ã  interface $NETWORK_INTERFACE_ID"
                aws ec2 release-address --allocation-id $ALLOCATION_ID || echo "Erro ao liberar Elastic IP: $ALLOCATION_ID"
              fi

              # Desvincular a interface
              ATTACHMENT_ID=$(aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE_ID --query "NetworkInterfaces[0].Attachment.AttachmentId" --output text 2>/dev/null || echo "NONE")
              if [ "$ATTACHMENT_ID" != "NONE" ]; then
                echo "Desvinculando interface de rede $NETWORK_INTERFACE_ID..."
                aws ec2 detach-network-interface --attachment-id $ATTACHMENT_ID || echo "Erro ao desvincular a interface $NETWORK_INTERFACE_ID"
              fi

              # Excluir a interface de rede
              echo "Excluindo interface de rede: $NETWORK_INTERFACE_ID"
              aws ec2 delete-network-interface --network-interface-id $NETWORK_INTERFACE_ID || echo "Erro ao excluir interface $NETWORK_INTERFACE_ID"
            done
          fi

      # Step to delete subnets and VPCs
      - name: Destroy VPCs and Associated Resources
        run: |
          VPC_IDS=$(aws ec2 describe-vpcs --query "Vpcs[*].VpcId" --output text)
          for VPC_ID in $VPC_IDS; do
            echo "Excluindo recursos associados Ã  VPC: $VPC_ID"

            # Remove subnets
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text)
            for SUBNET_ID in $SUBNET_IDS; do
              echo "Excluindo Subnet: $SUBNET_ID"
              aws ec2 delete-subnet --subnet-id $SUBNET_ID || echo "Erro ao excluir Subnet: $SUBNET_ID"
            done

            # Remove internet gateways
            IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query "InternetGateways[*].InternetGatewayId" --output text)
            for IGW_ID in $IGW_IDS; do
              echo "Desanexando e excluindo Internet Gateway: $IGW_ID"
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID || echo "Erro ao desanexar Internet Gateway: $IGW_ID"
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID || echo "Erro ao excluir Internet Gateway: $IGW_ID"
            done

            # Exclui a VPC
            echo "Excluindo VPC: $VPC_ID"
            aws ec2 delete-vpc --vpc-id $VPC_ID || echo "Erro ao excluir a VPC: $VPC_ID"
          done

      - name: Terraform Init
        run: cd terraform/destroy-only && terraform init

      - name: Terraform Plan Destroy
        run: cd terraform/destroy-only && terraform plan -destroy -out=tfplan

      - name: Terraform Apply Destroy
        run: cd terraform/destroy-only && terraform apply -auto-approve tfplan
