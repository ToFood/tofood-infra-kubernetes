name: Destroy Infra

on:
  workflow_dispatch: # Executado manualmente

jobs:
  destroy:
    runs-on: ubuntu-latest

    env:
      TF_VERSION: 1.0.0
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # Step to terminate EC2 instances
      - name: Terminate EC2 Instances
        run: |
          # Lista todas as instâncias EC2 em execução
          INSTANCE_IDS=$(aws ec2 describe-instances --query "Reservations[*].Instances[?State.Name=='running'].InstanceId" --output text)
          if [ -z "$INSTANCE_IDS" ]; then
            echo "Nenhuma instância EC2 em execução encontrada."
          else
            echo "Encerrando instâncias EC2: $INSTANCE_IDS"
            aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
            echo "Instâncias EC2 encerradas com sucesso."
          fi

      # Step to destroy all IAM Roles using AWS CLI
      - name: Destroy IAM Roles (Using AWS CLI)
        run: |
          ROLE_NAMES=("tofood-eks-cluster-role" "tofood-eks-node-role")
          for ROLE_NAME in "${ROLE_NAMES[@]}"; do
            echo "Tentando excluir políticas anexadas ao IAM Role: $ROLE_NAME"

            # Verifica se a role existe antes de listar políticas anexadas
            ROLE_EXISTS=$(aws iam get-role --role-name $ROLE_NAME --query "Role.RoleName" --output text 2>/dev/null || echo "false")
            if [ "$ROLE_EXISTS" == "false" ]; then
              echo "Role $ROLE_NAME não encontrada. Pulando..."
              continue
            fi

            # Lista e remove as políticas anexadas
            POLICY_ARN_LIST=$(aws iam list-attached-role-policies --role-name $ROLE_NAME --query "AttachedPolicies[*].PolicyArn" --output text)
            if [ -z "$POLICY_ARN_LIST" ]; then
              echo "Nenhuma política anexada ao IAM Role: $ROLE_NAME"
            else
              for POLICY_ARN in $POLICY_ARN_LIST; do
                echo "Desanexando política $POLICY_ARN de $ROLE_NAME"
                aws iam detach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY_ARN || echo "Erro ao desanexar política $POLICY_ARN"
              done
            fi

            # Exclui a role
            echo "Excluindo IAM Role: $ROLE_NAME"
            aws iam delete-role --role-name $ROLE_NAME || echo "Erro ao excluir a Role $ROLE_NAME. Verifique dependências ou permissões."
          done

      # Step to destroy all VPCs using AWS CLI
      - name: Destroy All VPCs (Using AWS CLI)
        run: |
          # Lista todas as VPCs
          VPC_IDS=$(aws ec2 describe-vpcs --query "Vpcs[*].VpcId" --output text)
          for VPC_ID in $VPC_IDS; do
            echo "Excluindo recursos associados à VPC: $VPC_ID"

            # Remove subnets associadas
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text)
            for SUBNET_ID in $SUBNET_IDS; do
              echo "Excluindo Subnet: $SUBNET_ID"
              aws ec2 delete-subnet --subnet-id $SUBNET_ID
            done

            # Remove Internet Gateways associadas
            IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query "InternetGateways[*].InternetGatewayId" --output text)
            for IGW_ID in $IGW_IDS; do
              echo "Desanexando e excluindo Internet Gateway: $IGW_ID"
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
            done

            # Exclui Security Groups personalizados
            SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
            for SG_ID in $SG_IDS; do
              echo "Excluindo Security Group: $SG_ID"
              aws ec2 delete-security-group --group-id $SG_ID
            done

            # Finalmente, exclui a VPC
            echo "Excluindo VPC: $VPC_ID"
            aws ec2 delete-vpc --vpc-id $VPC_ID
          done

      - name: Terraform Init
        run: cd terraform/destroy-only && terraform init

      - name: Terraform Plan Destroy
        run: cd terraform/destroy-only && terraform plan -destroy -out=tfplan

      - name: Terraform Apply Destroy
        run: cd terraform/destroy-only && terraform apply -auto-approve tfplan
