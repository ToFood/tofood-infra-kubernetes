name: Terraform Kubernetes Deployment

on:
  push:
    branches:
      - "**"

jobs:
  terraform:
    name: Terraform Kubernetes Deployment
    runs-on: ubuntu-latest

    env:
      TF_VERSION: 1.0.0
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}

    steps:
      # 1. Checkout do código-fonte
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      # 3. Configurar as credenciais da AWS usando os secrets do GitHub
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      # 4. Verificar formatação do Terraform
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      # 5. Inicializar o Terraform
      - name: Terraform Init
        run: terraform init

      # 6. Validar a configuração do Terraform
      - name: Terraform Validate
        run: terraform validate

      # 7. Planejar as mudanças de infraestrutura
      - name: Terraform Plan
        run: terraform plan

      # 8. Aplicar as mudanças de infraestrutura (somente na branch principal)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      # 9. Capturar o output do Terraform com verificações
      - name: Capture Terraform Outputs
        id: outputs
        run: |
          # Capturar e verificar a saída do Terraform
          CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null || true)
          if [ -z "$CLUSTER_NAME" ]; then
            echo "Error: Unable to capture cluster name from Terraform output."
            exit 1
          fi
          echo "KUBERNETES_CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      # 10. Adicione uma etapa para verificar o status do cluster
      - name: Wait for EKS cluster to be ready
        run: |
          until aws eks describe-cluster --name ${{ env.KUBERNETES_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query "cluster.status" --output text | grep -q "ACTIVE"; do
            echo "Waiting for EKS cluster to be ACTIVE..."
            sleep 30
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ vars.AWS_REGION }}

      # 11. Configurar kubectl para interagir com o cluster Kubernetes
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.KUBERNETES_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 12. Verificar estado do cluster Kubernetes
      - name: Get Kubernetes Cluster Nodes
        run: kubectl get nodes
